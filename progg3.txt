3. Write down a java program to print even and odd numbers series respectively  from two threads: t1 and t2 synchronizing on a shared object
package MainClass;
import MainClass.sharedPrinter;
class OddThread extends Thread
{
	int limit;
	sharedPrinter printer;
	public OddThread(int limit, sharedPrinter printer)
	{
			this.limit = limit;
			this.printer = printer;
	}
@Override
	public void run() 
	{
		int oddNumber = 1;        //First odd number is 1
		while (oddNumber <= limit)
		{
			printer.printOdd(oddNumber);       
			oddNumber = oddNumber + 2;         
		}
	}
}

 package MainClass;
import MainClass.sharedPrinter;
class EvenThread extends Thread
{
int limit;
sharedPrinter printer;
public EvenThread(int limit, sharedPrinter printer)
{
this.limit = limit;
this.printer = printer;
}
@Override
public void run() 
{
int evenNumber = 2;           
while (evenNumber <= limit)
{
printer.printEven(evenNumber);          
evenNumber = evenNumber + 2;        
}
}

package MainClass;
class sharedPrinter
{
boolean isOddPrinted = false;
synchronized void printOdd(int number)
{
while (isOddPrinted)
{
try
{
wait();
} 
catch (InterruptedException e)
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = true;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
synchronized void printEven(int number)
{
while (! isOddPrinted)
{
try
{
wait();
}
catch (InterruptedException e) 
{
e.printStackTrace();
}
}
System.out.println(Thread.currentThread().getName()+" : "+number);
isOddPrinted = false;
try
{
Thread.sleep(1000);
} 
catch (InterruptedException e) 
{
e.printStackTrace();
}
notify();
}
}
 package MainClass;
public class mainclass 
{
public static void main(String[] args) 
{
sharedPrinter printer = new sharedPrinter();
OddThread oddThread = new OddThread(20, printer);
oddThread.setName("ping-->");
EvenThread evenThread = new EvenThread(20, printer);
evenThread.setName("pong-->");
oddThread.start();
evenThread.start();
}
}









 

